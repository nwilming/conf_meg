#! /usr/bin/env bash

# This script projects a FreeSurfer surface file into a FreeSurfer subject's ribbon.
# Unlike FreeSurfer's mri_surf2vol --fillribbon, this script actually fills the entire
# ribbon and only the ribbon.
# By Noah C. Benson <nben@nyu.edu>

function syntax {
    echo \
'Syntax: surf2ribbon <subject> <surface> <arg> <out>
 <subject> must be a valid FreeSurfer subject id (in the $SUBJECTS_DIR 
  directory)
 <surface> must be a FreeSurfer surface data file or mgh/mgz file containing
  surface vertex data
 <arg> must be either "lh" or "rh" or a surface file; if it is a surface file
  then <surface> is taken to be the LH surface data and <arg> is taken to be
  the RH surface data; otherwise, <surface> is taken to be the given
  hemisphere
 <out> is the output MGH/MGZ file to write.
 Note that the subject argument may be omitted if the $SUBJECT environment
 variable is correctly set.

 The following options may be given:
  -k <k> specifies that <k> nearest neighbors should be checked (default: 12)
  -d <distance> specifies that the max allowable distance from a voxel center
     to a considered vertex is <distance> (default: 4)
  -s <sigma> specifies that the standard deviation of the Gaussian weighting
     should be <sigma> (default: 0.35355)' 1>&2
     exit 1
}

function die {
    echo "$@"
    exit 1
}


# Figure out where this script resides
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]
do # resolve $SOURCE until the file is no longer a symlink
   DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
   SOURCE="$(readlink "$SOURCE")"
   # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink
   # file was located
   [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" 
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
# add the neuropythy path and build path on the python path
[ -d "$DIR/neuropythy" ] && {
    export PYTHONPATH="$PYTHONPATH:$DIR"
}



####################################################################################################
# Check arguments!

# Defaults:
K=12
DIST=4
SIGMA=0.35355
SURFACE=""
ARG=""
OUT=""
BUMPED=""
while [ $# -gt 0 ]
do case "$1" in
     "-k")
       shift
       [ -z "$1" ] && syntax
       K="$1"
       ;;
     "-d")
       shift
       [ -z "$1" ] && syntax
       DIST="$1"
       ;;
     "-s")
       shift
       [ -z "$1" ] && syntax
       SIGMA="$1"
       ;;
     *)
       if [ -z "$SUBJECT" ]
       then SUBJECT="$1"
       elif [ -z "$SURFACE" ]
       then SURFACE="$1"
       elif [ -z "$ARG" ]
       then ARG="$1"
       elif [ -z "$OUT" ]
       then OUT="$1"
       elif [ -z "$BUMPED" ]
       then SUBJECT="$SURFACE"
            SURFACE="$ARG"
            ARG="$OUT"
            OUT="$1"
            BUMPED=1
       else syntax
       fi
   esac
   shift
done

# not enough args?
[ -z "$OUT" ] && syntax

# get our script's base directory
BASEDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

PYINTRO='
import numpy as np
import sys
sys.path.append('"'$BASEDIR'"')
import neuropythy, neuropythy.cortex, neuropythy.freesurfer
import nibabel.freesurfer.io as fsio
import nibabel.freesurfer.mghformat as fsmgh

sub = neuropythy.freesurfer.Subject('"'$SUBJECTS_DIR/$SUBJECT'"')
def read_surf_file(flnm):
  if flnm.endswith("mgh") or flnm.endswith("mgz"):
    data = fsmgh.load(flnm).get_data().flatten()
  else:
    data = fsio.read_morph_data(flnm)
  return data

'

if [ "$ARG" = 'LH' ] || [ "$ARG" = 'lh' ] || [ "$ARG" = 'RH' ] || [ "$ARG" = 'rh' ]
then hemi=`echo $ARG | tr LRH lrh`
     HEMI=`echo $ARG | tr lrh LRH`
     /usr/bin/env python <<EOF
$PYINTRO
data = read_surf_file('$SURFACE')
#surf2rib = neuropythy.freesurfer.cortex_to_ribbon_map(sub, k=$K, distance=$DIST, sigma=$SIGMA, hemi='$hemi')
surf2rib = neuropythy.freesurfer.cortex_to_ribbon_map(sub, hemi='$hemi')
vol = neuropythy.freesurfer.cortex_to_ribbon(sub, data, map=surf2rib)
vol.to_filename('$OUT')
exit(0)
EOF
else LHSURF="$SURFACE"
     RHSURF="$ARG"
     /usr/bin/env python <<EOF
$PYINTRO
data = (read_surf_file('$LHSURF'), read_surf_file('$RHSURF'))
#surf2rib = neuropythy.freesurfer.cortex_to_ribbon_map(sub, k=$K, distance=$DIST, sigma=$SIGMA)
surf2rib = neuropythy.freesurfer.cortex_to_ribbon_map(sub, hemi=None)
vol = neuropythy.freesurfer.cortex_to_ribbon(sub, data, map=surf2rib)
vol.to_filename('$OUT')
exit(0)
EOF
fi

exit 0
