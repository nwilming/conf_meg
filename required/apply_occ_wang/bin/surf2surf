#! /usr/bin/env bash

# This script projects a FreeSurfer surface file onto another subject's FreeSurfer surface file. If
# a mechanism by which the interpolation can proceed is not found, then an error results.
# By Noah C. Benson <nben@nyu.edu>

function syntax {
    echo \
'Syntax: surf2surf <hemi> <from-subject> <surf-file> <to-subject> <out-file>
 <hemi> must be lh or rh;
 <from-subject> and <to-subject> must be valid FreeSurfer subject ids (in the
   $SUBJECTS_DIR directory);
 <surf-file> must be a FreeSurfer surface data file or mgh/mgz file containing
   surface vertex data for the <from-subject>'"'"'s <hemi> hemisphere;
 <out-file> is the name of the file to output; if the extension is mgh or mgz,
   the MGH format will be used; otherwise FreeSurfer'"'"'s curv-file format will
   be used.
 Note that the subject argument may be omitted if the $SUBJECT environment
 variable is correctly set.
' 1>&2
     exit 1
}

function die {
    echo "$@"
    exit 1
}

function xhem {
    echo "Either the xhemi directory or the appropriate lh.fsaverage_sym.sphere.reg file is missing"
    echo "for subject $1, hemisphere $2. Please run the following commands first:"
    echo " surfreg --s \"$1\" --t fsaverage_sym --lh"
    echo " surfreg --s \"$1\" --t fsaverage_sym --lh --xhemi"
    exit 1
}

# Figure out where this script resides
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]
do # resolve $SOURCE until the file is no longer a symlink
   DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
   SOURCE="$(readlink "$SOURCE")"
   # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink
   # file was located
   [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" 
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
# add the neuropythy path and build path on the python path
[ -d "$DIR/neuropythy" ] && {
    export PYTHONPATH="$PYTHONPATH:$DIR"
}



####################################################################################################
# Check arguments!

# Defaults:
HEMI=""
FROMSUB=""
TOSUB=""
SURF=""
OUT=""
NEAREST="no"
while [ $# -gt 0 ]
do case "$1" in
     # No options currently allowed...
     -n)
         NEAREST="yes"
         ;;
     *)
         if [ -z "$HEMI" ]
         then HEMI="`echo $1 | tr lrh LRH`"
              hemi="`echo $1 | tr LRH lrh`"
         elif [ -z "$FROMSUB" ]
         then FROMSUB="$1"
         elif [ -z "$SURF" ]
         then SURF="$1"
         elif [ -z "$TOSUB" ]
         then TOSUB="$1"
         elif [ -z "$OUT" ]
         then OUT="$1"
         else syntax
         fi
         ;;
   esac
   shift
done

if [ "$HEMI" = "L" ]; then HEMI=LH; fi
if [ "$HEMI" = "R" ]; then HEMI=RH; fi
if [ "$hemi" = "l" ]; then HEMI=lh; fi
if [ "$hemi" = "r" ]; then HEMI=rh; fi

# not enough args?
[ -z "$OUT" ] && syntax

# get our script's base directory
BASEDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

FHEMI="$HEMI"
THEMI="$HEMI"

# some checks in case we use the fsaverage_sym...
if [ "$FROMSUB" = "$TOSUB" ]
then die "Interpolation between identical subjects is never necessary!"
elif [ "$FROMSUB" = "fsaverage_sym" ]
then FHEMI=LH
     if [ "$HEMI" = "RH" ]; then THEMI="RHX"; fi
elif [ "$TOSUB" = "fsaverage_sym" ]
then THEMI=LH
     if [ "$HEMI" = "RH" ]; then FHEMI=RHX; fi
fi

if [ "$NEAREST" = "yes" ]
then SUFFIX=', method="nearest"'
else SUFFIX=''
fi

# Make sure there is an xhemi directory...
if [ "$FHEMI" = "RHX" ]
then [ -d "$SUBJECTS_DIR/$FROMSUB/xhemi" ]                                         \
         || [ -r "$SUBJECTS_DIR/$FROMSUB/xhemi/surf/lh.fsaverage_sym.sphere.reg" ] \
         || xhem "$FROMSUB" "$FHEMI"
fi
if [ "$THEMI" = "RHX" ]
then [ -d "$SUBJECTS_DIR/$TOSUB/xhemi" ]                                         \
         || [ -r "$SUBJECTS_DIR/$TOSUB/xhemi/surf/lh.fsaverage_sym.sphere.reg" ] \
         || xhem "$TOSUB" "$TOHEMI"
fi
# Make sure the registration to fsaverage_sym has been done...
if [ "$FHEMI" = "LH" ] && [ "$TOSUB" = "fsaverage_sym" ]
then [ -r "$SUBJECTS_DIR/$FROMSUB/surf/lh.fsaverage_sym.sphere.reg" ] || xhem "$FROMSUB" LH
fi
if [ "$THEMI" = "LH" ] && [ "$FROMSUB" = "fsaverage_sym" ]
then [ -r "$SUBJECTS_DIR/$TOSUB/surf/lh.fsaverage_sym.sphere.reg" ] || xhem "$TOSUB" LH
fi
     
# Execute the python code!
/usr/bin/env python <<EOF
import numpy as np
import sys
sys.path.append('$BASEDIR')
import neuropythy, neuropythy.cortex, neuropythy.freesurfer
import nibabel.freesurfer.io as fsio
import nibabel.freesurfer.mghformat as fsmgh

fsub = neuropythy.freesurfer.Subject('$SUBJECTS_DIR/$FROMSUB')
fhem = fsub.$FHEMI
tsub = neuropythy.freesurfer.Subject('$SUBJECTS_DIR/$TOSUB')
them = tsub.$THEMI

def read_surf_file(flnm):
  if flnm.endswith("mgh") or flnm.endswith("mgz"):
    data = fsmgh.load(flnm).get_data().flatten()
  else:
    data = fsio.read_morph_data(flnm)
  return data

def write_surf_file(flnm, dat):
  dat = np.asarray([[[np.float32(0 if x is None else x) for x in dat]]])
  if flnm.endswith("mgh") or flnm.endswith("mgz"):
    m = fsmgh.MGHImage(dat, np.eye(4))
    fsmgh.save(m, flnm)
  else:
    #fsio.write_morph_data(flnm, dat)
    raise ValueError("morph data write not yet supported")

data = read_surf_file('$SURF')
odat = them.interpolate(fhem, data, apply=False${SUFFIX})
write_surf_file('$OUT', odat)

exit(0)
EOF

exit 0
